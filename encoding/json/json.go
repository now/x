// Package json simplifies working with JSON structures, primarily in testing.
//
// There are three types for representing JSON values, Value, Object, and Array.
// These are primarily intended for creating compound literals that can be
// compared to other JSON values and to be marshaled into *http.Request and
// *http.Response bodies.
package json

import (
	"encoding/json"
	"io"
)

// DecodeAndClose r into v.
//
// Does nothing if r is nil, otherwise delegates to json.NewDecoder(r).Decode(v).
//
// Errors if json.NewDecoder(r).Decode(v) errors.
//
// Ignores errors generated by r.Close().
func DecodeAndClose(r io.ReadCloser, v Value) error {
	if r == nil {
		return nil
	}

	defer r.Close()
	return json.NewDecoder(r).Decode(v)
}

// Encode v through an io.PipeReader.
//
// The JSON is indented using two spaces.
//
// Errors if json.Marshal(v) would error.
func Encode(v Value) *io.PipeReader {
	r, w := io.Pipe()
	go func() {
		e := json.NewEncoder(w)
		e.SetIndent("", "  ")
		w.CloseWithError(e.Encode(v))
	}()
	return r
}
